#summary Walkthrough for using matlabcontrol with a remote session

= Introduction =

This is a walkthrough for how to use matlabcontrol with a remote session. This guide refers to matlabcontrol v3.1.0. It is possible that at times this walkthrough will for a short while refer to a prior version after a new version has been released.

= Creating a proxy =

For any control of a remote session with matlabcontrol a `RemoteMatlabProxyFactory` must always be constructed. A `RemoteMatlabProxy` must then be retrieved from the factory; instances of `RemoteMatlabProxy` cannot be directly constructed. There are three ways to retrieve a proxy:
{{{
public String requestProxy() throws MatlabConnectionException
public RemoteMatlabProxy getProxy() throws MatlabConnectionException
public RemoteMatlabProxy getProxy(long timeout) throws MatlabConnectionException
}}}

=== Requesting a proxy ===

The first method, `requestProxy()`, returns a `String` which is the unique identifier of the proxy that will be created. When the proxy is created it will notify all of the `MatlabConnectionListener`s that have been added via the factory's `addConnectionListener(MatlabConnectionListener listener)` method. A connection listener has two methods:

{{{
public void connectionEstablished(RemoteMatlabProxy proxy);
public void connectionLost(RemoteMatlabProxy proxy);
}}}

When the `connectionEstablished(RemoteMatlabProxy proxy)` method is called a proxy that is connected to MATLAB will be passed in. Proxies have a `String getIdentifier()` method which returns their identifier. The identifier returned when `String requestProxy()` is called will create a proxy with a corresponding identifier.

=== Getting a proxy ===

The second and third methods directly return a proxy. This method will not return for a considerable amount of time because MATLAB must fully launch before the proxy can be created. Both methods will return after the proxy has been created. The `getProxy(long timeout)` will throw a `MatlabConnectionException`s if the proxy cannot be created in the specified amount of time; `getProxy()` operates identically with a timeout of 60 seconds.

When the proxy is constructed it will be returned directly. Any `MatlabConnectionListener`s that have been added to the factory will also be notified.

= Hello World =

Following in tradition, let's start with a Hello World example:

{{{
import matlabcontrol.*;

public class HelloWorld
{
  public static void main(String[] args) throws MatlabConnectionException, MatlabInvocationException
  {
    //Create a factory
    RemoteMatlabProxyFactory factory = new RemoteMatlabProxyFactory();

    //Get a proxy
    RemoteMatlabProxy proxy = factory.getProxy();

    //Use the proxy
    proxy.eval("disp('hello world')");
  }
}
}}}